Based on the README and documentation for **ANIMAL-SPOT**, here is a dry, factual comparison between their **data naming convention, pipeline expectations, and spectrogram settings** versus **ours**:

---

### üìÅ **Naming Convention**

**ANIMAL-SPOT:**

* Filenames must follow a strict 6-element format:

  ```
  CLASSNAME-LABELINFO_ID_YEAR_TAPENAME_STARTTIMEMS_ENDTIMEMS.wav
  ```
* Key structure rules:

  * Underscore (`_`) used exclusively as delimiter.
  * Hyphen (`-`) used **only** to separate `CLASSNAME` from optional `LABELINFO`.
* Example:

  ```
  target-monkparakeet_929_2021_TapeA123_2949326_2949919.wav
  ```
* Required fields:

  * `CLASSNAME`: The classification label (e.g., `target`, `noise`, `alarm`)
  * `LABELINFO`: Optional detail (e.g., species or call type)
  * `ID`: Unique numeric ID
  * `YEAR`: Recording year
  * `TAPENAME`: Name of source tape/recording
  * `STARTTIMEMS`, `ENDTIMEMS`: Millisecond-precision segment boundaries

**OURS:**

* Filename structure based on original file and segment timing:

  * Labelled recordings:

    ```
    originalFile.wav_startTime[s]_endTime[s].wav
    ```
  * Segmented hums:

    ```
    originalFile.wav_startTime[s]_endTime[s]_[segmentStart]_[segmentEnd]Q[quality].wav
    ```
* Uses human-readable float timestamps (in seconds)
* Quality is appended as `Q[2‚Äì4]` suffix in segmented files (not encoded via CLASSNAME)
* No required class label prefix in the filename

---

### üîÑ **Pipeline Expectations**

**ANIMAL-SPOT:**

* Expects **cropped and labeled audio excerpts** as `.wav` files
* Classification tasks:

  * Binary (e.g., `target` vs `noise`)
  * Multi-class (species or call-type level)
* Filename encodes **all metadata**, which the system parses automatically
* Automatically performs **data split** (train/val/test) using tape+year as unique identifier to avoid data leakage
* Requires fixed segment length for training (adjusted via config)
* Uses default or user-specified CNN hyperparameters via config file

**OURS:**

* Maintains three stages of data:

  1. Full **raw recordings**
  2. **Labelled recordings** (with hum presence)
  3. **Segmented hums** with quality scores
* Labels are implicit via directory structure and filename, **not class-prefixed**
* No enforced data split logic or input formatting for neural training
* Currently focused on manual annotation and segmentation

---

### üìä **Spectrogram Settings**

**ANIMAL-SPOT:**

* **Not explicitly defined** in the README
* Presumably controlled via config files in the `TRAINING` and `PREDICTION` directories
* Likely defaults to standard Mel spectrograms or spectrogram-based ResNet18 input

**OURS:**

* Explicit settings used:

  * **Window**: Hann
  * **Window size**: 2002 samples (\~41.7 ms)
  * **Hop size**: 1001 samples (50% overlap)
  * **Frequency filter**: 0‚Äì4000 Hz

---

### ‚úÖ Summary

| Aspect               | ANIMAL-SPOT                                            | Ours                                                      |
| -------------------- | ------------------------------------------------------ | --------------------------------------------------------- |
| Filename Format      | Structured, class-first, 6 fixed fields                | Original-based, segment-timing-based                      |
| Label Encoding       | Encoded via filename CLASSNAME                         | Implied by directory and presence                         |
| Segment Timing       | Millisecond precision                                  | Second (float) precision                                  |
| Quality Metadata     | Not included                                           | Included as Q-suffix (e.g., Q3)                           |
| Data Structure       | Single folder or subfolders per class, CSV auto-splits | Organized in 3 folders: raw, labelled, segmented          |
| Spectrogram Settings | Unspecified, inferred from model configs               | Explicit: Hann window, 41.7ms, 50% overlap, 0‚Äì4kHz filter |

Let me know if you'd like a tailored converter or preprocessor to make our data ANIMAL-SPOT compatible.
